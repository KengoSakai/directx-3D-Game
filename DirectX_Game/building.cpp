/******************************************************************
***
***		建物配置処理
***
***		building.cpp
***
***		author: Kengo Sakai
***
*******************************************************************/

/******************************************************************
インクルードファイル
*******************************************************************/
#include "manager.h"
#include "renderer.h"
#include "building.h"
/******************************************************************
マクロ定義
*******************************************************************/
#define NUM_BUILD (4)
/******************************************************************
構造体またはクラス定義
*******************************************************************/

/******************************************************************
プロトタイプ宣言
*******************************************************************/

/******************************************************************
グローバル変数
*******************************************************************/

/******************************************************************/

/******************************************************************
コンストラクタ
*******************************************************************/
CBuilding::CBuilding()
{
	CManager::GetModelManager()->LoadModel(CModelManager::TYPE_BUILDING);
	CManager::GetTextureManager()->LoadTexture(CTextureManager::TYPE_TREE);
}

/******************************************************************
デストラクタ
*******************************************************************/
CBuilding::~CBuilding()
{

}

/******************************************************************
初期化処理関数
*******************************************************************/
void CBuilding::Initialize(int nCnt)
{
	//モデルの初期化
	CModel::Initialize();

	//座標設定（外部ファイルでやった方がいい）
	SetPosition(nCnt);
}

/******************************************************************
終了処理関数
*******************************************************************/
void CBuilding::Uninitialize(void)
{
	CModel::Uninitialize();
}

/******************************************************************
更新処理関数
*******************************************************************/
void CBuilding::Update(void)
{
	//Rotate.y++;
}

/******************************************************************
描画処理関数
*******************************************************************/
void CBuilding::Draw(void)
{
	CModel::SetMatrix();
	//描画処理
	CModel::Draw();
}

/******************************************************************
オブジェクト作成関数
*******************************************************************/
CBuilding *CBuilding::Create(void)
{
	//オブジェクトポインタ
	CBuilding *pBuilding;

	//表示するオブジェクト分繰り返す
	for (int nCnt = 0; nCnt < NUM_BUILD; nCnt++)
	{
		//インスタンスの生成
		pBuilding = new CBuilding;

		//初期化処理
		pBuilding->Initialize(nCnt);

		//オブジェクトの型登録関数呼び出し
		pBuilding->SetObjType(OBJTYPE_BUILDING);

		//バッファ情報を送る
		pBuilding->BindBuff(CManager::GetModelManager()->GetMaterialBuffer(CModelManager::TYPE_BUILDING));

		//要素数を送る
		pBuilding->BindMaterials(CManager::GetModelManager()->GetNumMaterials(CModelManager::TYPE_BUILDING));

		//メッシュ情報を送る
		pBuilding->BindMesh(CManager::GetModelManager()->GetMesh(CModelManager::TYPE_BUILDING));

		pBuilding->BindTexture(CManager::GetTextureManager()->GetTexture(CTextureManager::TYPE_TREE));
	}
	return pBuilding;
}

/******************************************************************
位置情報取得関数
*******************************************************************/
D3DXVECTOR3 CBuilding::GetPosition(void)
{
	return Position;
}

/******************************************************************
建物の配置位置設定処理関数
*******************************************************************/
void CBuilding::SetPosition(int nCnt)
{
	if (nCnt < NUM_BUILD)
	{
		Scale = D3DXVECTOR3(1.0f, 1.0f, 1.0f);				//拡大率

		if (nCnt == 0)
		{
			//初期のステータス
			Position = D3DXVECTOR3(-450.0f, 0.0f, 450.0f);	//座標
			Rotate = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		//回転
			return;
		}

		else if (nCnt == 1)
		{
			//初期のステータス
			Position = D3DXVECTOR3(-450.0f, 0.0f, -450.0f);	//座標
			Rotate = D3DXVECTOR3(0.0f, 0.0f, 0.0f);				//回転
			return;
		}

		else if (nCnt == 2)
		{
			//初期のステータス
			Position = D3DXVECTOR3(450.0f, 0.0f, 450.0f);	//座標
			Rotate = D3DXVECTOR3(0.0f, 0.0f, 0.0f);				//回転
			return;
		}

		else if (nCnt == 3)
		{
			//初期のステータス
			Position = D3DXVECTOR3(450.0f, 0.0f, -450.0f);	//座標
			Rotate = D3DXVECTOR3(0.0f, 0.0f, 0.0f);				//回転
			return;
		}
	}

	else
	{
		MessageBox(NULL, "規定数以上のオブジェクトを配置しようとしました", "エラーメッセージ", MB_OK);
	}
}
