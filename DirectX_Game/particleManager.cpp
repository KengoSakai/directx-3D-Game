/******************************************************************
***
***		パーティクルオブジェクト管理処理
***
***		ParticleMnager.cpp
***
***		author: Kengo Sakai
***
*******************************************************************/

/******************************************************************
インクルードファイル
*******************************************************************/
#include "particleManager.h"
#include "renderer.h"
/******************************************************************
マクロ定義
*******************************************************************/


/******************************************************************
構造体またはクラス定義
*******************************************************************/


/******************************************************************
プロトタイプ宣言
*******************************************************************/

/******************************************************************
グローバル変数
*******************************************************************/
CParticleManager *CParticleManager::m_apParticle[NUM_PARTICLE];
int CParticleManager :: m_nNumParticle;
/******************************************************************/

/******************************************************************
コンストラクタ
*******************************************************************/
CParticleManager :: CParticleManager()
{
	for(int nCntScene = 0 ; nCntScene < NUM_PARTICLE ; nCntScene++)
	{
		if(m_apParticle[nCntScene] == NULL)
		{
			m_apParticle[nCntScene] = this;
			m_nID = nCntScene;
			m_nNumParticle++;
			break;
		}
	}
}

/******************************************************************
デストラクタ
*******************************************************************/
CParticleManager :: ~CParticleManager()
{

}

/******************************************************************
オブジェクト全更新処理関数
*******************************************************************/
void CParticleManager :: UpdateAll(void)
{
	for(int nCntScene = 0 ; nCntScene < NUM_PARTICLE ; nCntScene++)
	{
		if(m_apParticle[nCntScene] != NULL)
		{
			m_apParticle[nCntScene] -> Update();
		}
	}
}

/******************************************************************
オブジェクト終了処理関数
*******************************************************************/
void CParticleManager :: Release (void)
{
	//変数宣言
	int nID;
	nID = m_nID;	//オブジェクトの総数を代入

	if(m_apParticle[m_nID] != NULL)
	{
		delete m_apParticle[nID] ;
		m_apParticle[nID] = NULL ;
		m_nNumParticle--;
	}
}

/******************************************************************
オブジェクト全終了処理関数
*******************************************************************/
void CParticleManager :: ReleaseAll (void)
{
	for(int nCntScene = 0 ; nCntScene < NUM_PARTICLE ; nCntScene++)
	{
		if(m_apParticle[nCntScene] != NULL)
		{
			m_apParticle[nCntScene] -> Uninitialize();
		}
	}
}

/******************************************************************
//オブジェクト全描画処理関数
*******************************************************************/
void CParticleManager::DrawAll(void)
{
	for(int nCntScene = 0 ; nCntScene < NUM_PARTICLE ; nCntScene++)
	{
		if(m_apParticle[nCntScene] != NULL)
		{
			m_apParticle[nCntScene] -> Draw();
		}
	}
}
